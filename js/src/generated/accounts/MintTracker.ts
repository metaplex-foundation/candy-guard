/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link MintTracker}
 * @category Accounts
 * @category generated
 */
export type MintTrackerArgs = {
  count: number;
};

export const mintTrackerDiscriminator = [217, 230, 22, 187, 250, 88, 11, 174];
/**
 * Holds the data for the {@link MintTracker} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class MintTracker implements MintTrackerArgs {
  private constructor(readonly count: number) {}

  /**
   * Creates a {@link MintTracker} instance from the provided args.
   */
  static fromArgs(args: MintTrackerArgs) {
    return new MintTracker(args.count);
  }

  /**
   * Deserializes the {@link MintTracker} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [MintTracker, number] {
    return MintTracker.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link MintTracker} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<MintTracker> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find MintTracker account at ${address}`);
    }
    return MintTracker.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, mintTrackerBeet);
  }

  /**
   * Deserializes the {@link MintTracker} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [MintTracker, number] {
    return mintTrackerBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link MintTracker} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return mintTrackerBeet.serialize({
      accountDiscriminator: mintTrackerDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link MintTracker}
   */
  static get byteSize() {
    return mintTrackerBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link MintTracker} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(MintTracker.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link MintTracker} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === MintTracker.byteSize;
  }

  /**
   * Returns a readable version of {@link MintTracker} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      count: this.count,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const mintTrackerBeet = new beet.BeetStruct<
  MintTracker,
  MintTrackerArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['count', beet.u32],
  ],
  MintTracker.fromArgs,
  'MintTracker',
);
